{"version":3,"sources":["NavBar.js","components/gifviewer/AddCategory.js","components/gifviewer/GIFGridItem.js","helpers/getGIFs.js","components/gifviewer/GIFGrid.js","hooks/useFetchGIFs.js","components/gifviewer/GIFViewer.js","index.js"],"names":["NavBar","id","className","AddCategory","setCategories","limit","useState","category","setCategory","rows","setRows","numberImgs","setNumberImgs","onSubmit","e","preventDefault","trim","categories","current","handleSubmit","type","onChange","target","value","charAt","toUpperCase","slice","for","GIFGridItem","title","url","sizeCard","size","console","log","src","alt","fetchGIFs","offset","rating","lang","a","baseUrl","encodeURI","fetch","response","json","dataJSON","data","GIFObjectArray","map","img","images","downsized","height","width","getGIFs","JSON","stringify","arrayImgs","outputImgs","push","GIFGrid","index","loading","state","setstate","useEffect","then","imgs","useFetchGIFs","GIFViewer","useRef","el","path","root","document","querySelector","ReactDOM","render"],"mappings":"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","file":"static/js/main.e7e4a04c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./css/NavBar.css\";\r\n\r\nconst NavBar = () => {\r\n  return (\r\n    <div id=\"navBar\">\r\n      <div>\r\n        <div>\r\n          <h3>Home</h3>\r\n        </div>\r\n        <div>\r\n          <div className=\"containerItem\">\r\n            <div>\r\n              <img />\r\n            </div>\r\n            <h5 className=\"itemNavBar\">Inform</h5>\r\n          </div>\r\n          <div>\r\n            <div>\r\n              <img />\r\n            </div>\r\n            <h5 className=\"itemNavBar\">GIF Viewer</h5>\r\n          </div>\r\n          <div>\r\n            <div>\r\n              <img />\r\n            </div>\r\n            <h5 className=\"itemNavBar\">Others</h5>\r\n          </div>\r\n          <div></div>\r\n        </div>\r\n      </div>\r\n      <div></div>\r\n    </div>\r\n  );\r\n};\r\nexport default NavBar;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({ setCategories, limit }) => {\r\n  const [category, setCategory] = useState(\"\");\r\n  const [rows, setRows] = useState(1);\r\n  const [numberImgs, setNumberImgs] = useState(4);\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (category.trim() === \"\") return null;\r\n    setCategories((categories) => [category, ...categories]);\r\n    limit.current = numberImgs * rows;\r\n    setCategory(\"\");\r\n  };\r\n  return (\r\n    <form onSubmit={(e) => handleSubmit(e)}>\r\n      <div className=\"formRow\">\r\n        <div className=\"form-floating col-md-3\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"inCategory\"\r\n            onChange={(e) => {\r\n              setCategory(\r\n                e.target.value.charAt(0).toUpperCase() + e.target.value.slice(1)\r\n              );\r\n            }}\r\n            value={category}\r\n          />\r\n          <label for=\"inCategory\">Category</label>\r\n        </div>\r\n        <div className=\"form-floating col-md-2\">\r\n          <select\r\n            className=\"form-select\"\r\n            id=\"selRows\"\r\n            value={rows}\r\n            onChange={(e) => {\r\n              setRows(e.target.value);\r\n            }}\r\n          >\r\n            <option value=\"1\">1</option>\r\n            <option value=\"2\">2</option>\r\n          </select>\r\n          <label for=\"selRows\">Number of rows</label>\r\n        </div>\r\n        <div className=\"form-floating col-md-2\">\r\n          <select\r\n            className=\"form-select\"\r\n            id=\"selNumberImgs\"\r\n            value={numberImgs}\r\n            onChange={(e) => {\r\n              setNumberImgs(e.target.value);\r\n            }}\r\n          >\r\n            <option value=\"4\">2-4</option>\r\n            <option value=\"6\">3-6</option>\r\n          </select>\r\n          <label for=\"selNumberImgs\">Images per row</label>\r\n        </div>\r\n        <div className=\"d-grid gap-2 col-md-3\">\r\n          <button type=\"submit\" className=\"btn btn-lg btn-outline-success\">\r\n            Search\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"../../css/GIFViewer.css\";\r\nconst GIFGridItem = ({ id, title, url, size }) => {\r\n  const sizeCard = size === \"large\" ? \"card-large\" : \"card-medium\";\r\n  console.log(sizeCard);\r\n  return (\r\n    <div className={sizeCard + \" card animate__bounce\"}>\r\n      <img src={url} key={id} alt={title} className=\"cardImg\" />\r\n      <p className=\"cardDescription\">{title}</p>\r\n    </div>\r\n  );\r\n};\r\nexport default GIFGridItem;\r\n","const fetchGIFs = async (category, offset, limit, rating, lang) => {\r\n  const baseUrl = `https://api.giphy.com/v1/gifs/search?api_key=S6KJyAUUatdC1UyULrMkRDlmyUyrZ76K&q=${encodeURI(\r\n    category\r\n  )}&limit=${limit}&offset=${offset}&rating=${rating}&lang=${lang}&random_id=e826c9fc5c929e0d6c6d423841a282aa`;\r\n  const response = await fetch(baseUrl);\r\n  const dataJSON = await response.json();\r\n  const { data } = dataJSON;\r\n  const GIFObjectArray = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images.downsized.url,\r\n      height: img.images.downsized.height,\r\n      width: img.images.downsized.width,\r\n      size:\r\n        img.images.downsized.width / img.images.downsized.height > 1.5\r\n          ? \"large\"\r\n          : \"medium\",\r\n    };\r\n  });\r\n  return GIFObjectArray;\r\n};\r\nexport const getGIFs = async (\r\n  category,\r\n  offset,\r\n  limit,\r\n  rating = \"g\",\r\n  lang = \"en\"\r\n) => {\r\n  console.log(\"limite es: \" + JSON.stringify(limit));\r\n  const arrayImgs = await fetchGIFs(category, offset, limit, rating, lang);\r\n  const outputImgs = [];\r\n  for (let img of arrayImgs) {\r\n    if (limit < 1) {\r\n      break;\r\n    } else if ((limit === 1 || limit === 5) && img.size === \"large\") {\r\n      limit--;\r\n    } else {\r\n      if (img.size === \"large\") {\r\n        limit -= 2;\r\n      } else {\r\n        limit -= 1;\r\n      }\r\n      outputImgs.push(img);\r\n    }\r\n  }\r\n  return outputImgs;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport GIFGridItem from \"./GIFGridItem\";\r\nimport { useFetchGIFs } from \"../../hooks/useFetchGIFs\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport \"../../css/GIFViewer.css\";\r\n\r\nconst GIFGrid = ({ category, limit }) => {\r\n  const { data, loading } = useFetchGIFs(category, 0, limit.current);\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"category\">{category}</h3>\r\n      {loading && <h3 className=\"msgLoading\">Loading</h3>}\r\n      <div id=\"gridContainer\">\r\n        {data.map((img) => {\r\n          return <GIFGridItem key={img.id} {...img} />;\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nGIFGrid.propTypes = {\r\n  category: PropTypes.string.isRequired,\r\n};\r\nexport default GIFGrid;\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGIFs } from \"../helpers/getGIFs\";\r\nexport const useFetchGIFs = (category, index, limit) => {\r\n  const [state, setstate] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n  useEffect(() => {\r\n    getGIFs(category, index, limit).then((imgs) => {\r\n      setstate({\r\n        data: imgs,\r\n        loading: false,\r\n      });\r\n    });\r\n  }, []);\r\n  return state;\r\n};\r\n","import React, { useState, useRef } from \"react\";\r\nimport { AddCategory } from \"./AddCategory.js\";\r\nimport GIFGrid from \"./GIFGrid\";\r\n//import \"../../css/index.css\";\r\nconst GIFViewer = () => {\r\n  const [categories, setCategories] = useState([\"Invincible\"]);\r\n  const limit = useRef(4);\r\n  return (\r\n    <div className=\"content\">\r\n      <h2 id=\"heading\">GIFViewer</h2>\r\n\r\n      <AddCategory setCategories={setCategories} limit={limit} />\r\n\r\n      {categories.map((el) => {\r\n        console.log(\"en viewer\" + limit.current);\r\n        return <GIFGrid category={el} key={el} limit={limit} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\nexport default GIFViewer;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport ReactDOM from \"react-dom\";\r\nimport NavBar from \"./NavBar\";\r\nimport GIFViewer from \"./components/gifviewer/GIFViewer\";\r\nimport \"./css/index.css\";\r\nconst index = (\r\n  <Router>\r\n    <NavBar />\r\n    <Switch>\r\n      <Route path=\"/home\">\r\n        <GIFViewer />\r\n      </Route>\r\n      <Route path=\"/\">\r\n        <GIFViewer />\r\n      </Route>\r\n    </Switch>\r\n  </Router>\r\n);\r\nconst root = document.querySelector(\"#root\");\r\nReactDOM.render(index, root);\r\n"],"sourceRoot":""}